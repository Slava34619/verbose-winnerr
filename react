import React, { useMemo, useState, useRef } from "react";
import { motion } from "framer-motion";
import {
  Handshake,
  Percent,
  ShieldCheck,
  FileText,
  Calculator,
  LineChart,
  Users,
  ArrowRight,
  CheckCircle2,
  CircleDollarSign,
  HeartHandshake,
  Building2,
  BookOpen,
  Mail,
  Phone,
  Menu,
  X,
  Info,
  Star,
  Download,
  Loader2
} from "lucide-react";

// shadcn/ui components (available in this environment)
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

// ---- Utility ----
const currency = (n) => new Intl.NumberFormat("ru-RU", { style: "currency", currency: "RUB", maximumFractionDigits: 0 }).format(Number.isFinite(n) ? n : 0);

// Smooth scroll function
const smoothScrollTo = (elementId) => {
  const element = document.getElementById(elementId);
  if (element) {
    element.scrollIntoView({ behavior: 'smooth' });
  }
};

// ---- Page ----
export default function PartnerLanding() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 via-white to-slate-50 text-slate-900">
      <NavBar />
      <Hero />
      <Logos />
      <Stats />
      <HowItWorks />
      <CommissionCalculator />
      <Plans />
      <Testimonials />
      <LegalBlock />
      <FAQ />
      <CTA />
      <Footer />
    </div>
  );
}

// ---- Components ----
function NavBar() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  const navItems = [
    { href: "how", label: "Как это работает" },
    { href: "calc", label: "Калькулятор" },
    { href: "plans", label: "Вознаграждения" },
    { href: "testimonials", label: "Отзывы" },
    { href: "legal", label: "Юр.чистота" },
    { href: "faq", label: "FAQ" },
  ];

  const handleNavClick = (href) => {
    smoothScrollTo(href);
    setMobileMenuOpen(false);
  };

  return (
    <div className="sticky top-0 z-50 backdrop-blur bg-white/70 border-b">
      <div className="container mx-auto px-4 py-3 flex items-center justify-between">
        <div className="flex items-center gap-2 font-semibold">
          <HeartHandshake className="h-6 w-6" />
          Партнёрская программа
          <Badge variant="secondary" className="ml-2">официально</Badge>
        </div>
        
        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center gap-6 text-sm text-slate-600">
          {navItems.map((item) => (
            <button
              key={item.href}
              onClick={() => handleNavClick(item.href)}
              className="hover:text-slate-900 transition-colors"
            >
              {item.label}
            </button>
          ))}
        </div>

        <div className="flex items-center gap-3">
          <Button variant="ghost" className="hidden md:inline-flex" onClick={() => handleNavClick("contact")}>
            Связаться
          </Button>
          <Button className="rounded-2xl" onClick={() => handleNavClick("contact")}>
            Стать партнёром
          </Button>

          {/* Mobile Menu Button */}
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            {mobileMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
          </Button>
        </div>
      </div>

      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: "auto" }}
          exit={{ opacity: 0, height: 0 }}
          className="md:hidden bg-white border-t"
        >
          <div className="container mx-auto px-4 py-4 flex flex-col gap-3">
            {navItems.map((item) => (
              <button
                key={item.href}
                onClick={() => handleNavClick(item.href)}
                className="py-2 text-left hover:text-slate-900 transition-colors"
              >
                {item.label}
              </button>
            ))}
            <Button variant="outline" className="mt-2" onClick={() => handleNavClick("contact")}>
              Связаться
            </Button>
          </div>
        </motion.div>
      )}
    </div>
  );
}

function Hero() {
  return (
    <section id="hero" className="container mx-auto px-4 py-16 md:py-24">
      <div className="grid md:grid-cols-2 gap-10 items-center">
        <div>
          <motion.h1
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="text-4xl md:text-5xl font-extrabold leading-tight tracking-tight"
          >
            Зарабатывайте <span className="text-slate-700">официально</span> на рекомендациях
          </motion.h1>
          <p className="mt-4 text-lg text-slate-600">
            Приводите компании на закупки — получайте вознаграждение как самозанятый. Никаких «серых схем»: договор, чек «Мой налог», прозрачные выплаты.
          </p>
          <div className="mt-6 flex flex-col sm:flex-row gap-3">
            <Button size="lg" className="rounded-2xl" onClick={() => smoothScrollTo("contact")}>
              Присоединиться <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
            <Button size="lg" variant="outline" className="rounded-2xl" onClick={() => smoothScrollTo("how")}>
              Как это работает
            </Button>
          </div>
          <div className="mt-6 flex items-center gap-6 text-sm text-slate-500">
            <div className="flex items-center gap-2"><ShieldCheck className="h-4 w-4"/> Законно</div>
            <div className="flex items-center gap-2"><LineChart className="h-4 w-4"/> Прозрачно</div>
            <div className="flex items-center gap-2"><CircleDollarSign className="h-4 w-4"/> Выгодно</div>
          </div>
        </div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
          className="md:pl-10"
        >
          <Card className="shadow-xl border-slate-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Handshake className="h-5 w-5"/> Прозрачная схема</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4 text-sm">
              <Step num={1} icon={<Users className="h-4 w-4"/>} title="Регистрируйтесь как самозанятый" desc="2 минуты в приложении 'Мой налог'."/>
              <Step num={2} icon={<Building2 className="h-4 w-4"/>} title="Рекомендуйте наш товар" desc="Коммуницируйте с закупщиками/компаниями, передавайте лиды."/>
              <Step num={3} icon={<FileText className="h-4 w-4"/>} title="Оформляем сделку" desc="Мы заключаем договор с клиентом и поставляем товар."/>
              <Step num={4} icon={<Percent className="h-4 w-4"/>} title="Получаете процент" desc="Присылаете акт и чек — переводим вознаграждение на карту."/>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </section>
  );
}

function Step({ num, title, desc, icon }) {
  return (
    <div className="flex gap-3">
      <div className="flex-none">
        <div className="h-8 w-8 rounded-full bg-slate-100 flex items-center justify-center font-semibold">{num}</div>
      </div>
      <div className="grow">
        <div className="flex items-center gap-2 font-medium">{icon} {title}</div>
        <div className="text-slate-500">{desc}</div>
      </div>
    </div>
  );
}

function Logos() {
  return (
    <section className="container mx-auto px-4 pb-10 -mt-6">
      <div className="rounded-2xl border bg-white p-5 md:p-6 flex items-center justify-between gap-6 overflow-x-auto">
        {[
          "Чеки 'Мой налог'",
          "Акты оказанных услуг",
          "Агентский договор",
          "Учёт лидов",
          "Ежемесячные выплаты"
        ].map((t, i) => (
          <div key={i} className="text-slate-500 text-sm whitespace-nowrap">{t}</div>
        ))}
      </div>
    </section>
  );
}

function Stats() {
  const stats = [
    { label: "Средний % партнёра", value: "7–10%" },
    { label: "Выплаты", value: "ежемесячно" },
    { label: "Налоги", value: "самозанятый 4–6%" },
    { label: "Подключение", value: "за 1 день" },
  ];
  return (
    <section className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {stats.map((s, i) => (
          <Card key={i} className="border-slate-200">
            <CardContent className="p-5">
              <div className="text-2xl font-bold">{s.value}</div>
              <div className="text-slate-500 text-sm">{s.label}</div>
            </CardContent>
          </Card>
        ))}
      </div>
    </section>
  );
}

function HowItWorks() {
  return (
    <section id="how" className="container mx-auto px-4 py-14">
      <div className="grid md:grid-cols-3 gap-6">
        {[ 
          {icon: <Handshake className="h-5 w-5"/>, title: "Публичная партнёрка", desc: "Любой самозанятый может участвовать, нет 'закулисья'."},
          {icon: <ShieldCheck className="h-5 w-5"/>, title: "Юридически чисто", desc: "Договор + акт + чек. Расходы для ИП, доход для партнёра."},
          {icon: <LineChart className="h-5 w-5"/>, title: "Платим за результат", desc: "Вознаграждение только за состоявшиеся сделки."}
        ].map((b, i) => (
          <Card key={i} className="border-slate-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-base font-semibold">{b.icon}{b.title}</CardTitle>
            </CardHeader>
            <CardContent className="text-slate-600">{b.desc}</CardContent>
          </Card>
        ))}
      </div>
    </section>
  );
}

function CommissionCalculator() {
  const [amount, setAmount] = useState(100000);
  const [percent, setPercent] = useState(7);
  const [includeVAT, setIncludeVAT] = useState(false);

  const result = useMemo(() => {
    const base = Number(amount) || 0;
    const pct = (Number(percent) || 0) / 100;
    const net = includeVAT ? Math.round(base / 1.2) : base; // если сумма с НДС — снимаем НДС 20%
    const reward = Math.round(net * pct);
    return { base, net, reward };
  }, [amount, percent, includeVAT]);

  return (
    <section id="calc" className="container mx-auto px-4 py-16">
      <div className="grid md:grid-cols-2 gap-8 items-start">
        <div>
          <h2 className="text-2xl md:text-3xl font-bold flex items-center gap-2"><Calculator className="h-6 w-6"/> Калькулятор вознаграждения</h2>
          <p className="mt-2 text-slate-600">Посчитайте, сколько вы заработаете с каждой сделки. Мы считаем от суммы <span className="font-medium">без НДС</span>.</p>

          <div className="mt-6 grid gap-5">
            <div className="grid gap-2">
              <Label htmlFor="amount">Сумма сделки</Label>
              <Input id="amount" type="number" min="0" value={amount} onChange={(e) => setAmount(e.target.value)} />
              <div className="flex items-center gap-2 text-xs text-slate-500">
                <Switch id="vat" checked={includeVAT} onCheckedChange={setIncludeVAT} />
                <Label htmlFor="vat" className="cursor-pointer">Указать сумму <span className="font-medium">с НДС 20%</span></Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger>
                      <Info className="h-3.5 w-3.5" />
                    </TooltipTrigger>
                    <TooltipContent className="max-w-xs">
                      <p className="text-xs">Мы являемся плательщиком НДС. Вознаграждение начисляется на стоимость услуг/товаров без учёта налога, так как НДС — это обязательный платеж в бюджет.</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="percent">Процент партнёра, %</Label>
              <div className="flex items-center gap-2">
                <Input id="percent" type="number" min="0" max="100" value={percent} onChange={(e) => setPercent(e.target.value)} />
                <div className="w-full max-w-48">
                  <input
                    type="range"
                    min="0"
                    max="20"
                    value={percent}
                    onChange={(e) => setPercent(e.target.value)}
                    className="w-full h-2 bg-slate-200 rounded-lg appearance-none cursor-pointer"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
        <motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }}>
          <Card className="border-slate-200 shadow-lg">
            <CardHeader>
              <CardTitle className="text-lg">Итоги расчёта</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-3 text-sm">
              <Row label="Сумма сделки (ввод)">{currency(result.base)}</Row>
              <Row label="Сумма без НДС 20%">{currency(result.net)}</Row>
              <Row label={`Вознаграждение (${percent}% от базы)`} strong>
                {currency(result.reward)}
              </Row>
              <div className="pt-2 text-xs text-slate-500">
                * Фактическая выплата производится по акту и чеку самозанятого. Начисления — ежемесячно.
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </section>
  );
}

function Row({ label, children, strong }) {
  return (
    <div className="flex items-center justify-between">
      <div className="text-slate-500">{label}</div>
      <div className={strong ? "font-bold" : ""}>{children}</div>
    </div>
  );
}

function Plans() {
  return (
    <section id="plans" className="container mx-auto px-4 py-12">
      <h2 className="text-2xl md:text-3xl font-bold">Вознаграждение и условия</h2>
      <p className="mt-2 text-slate-600">Выбирайте формат, который подходит вам. Можно начать с фикса и перейти на процент.</p>
      <div className="grid md:grid-cols-3 gap-6 mt-6">
        <PlanCard title="Старт" badge="Новичкам" percent="5%" points={["Фикс 5% от сделки","Выплата раз в месяц","Акт + чек"]} />
        <PlanCard title="Про" badge="Оптимально" featured percent="7%" points={["7% от базы (без НДС)","Бонус за объём","Приоритетная поддержка"]} />
        <PlanCard title="Премиум" percent="10%" points={["10% при обороте от 3 млн/мес","Индивидуальные условия","Отдельный менеджер"]} />
      </div>
    </section>
  );
}

function PlanCard({ title, percent, points, featured=false, badge }) {
  return (
    <Card className={`border-slate-200 ${featured ? "ring-2 ring-slate-900" : ""}`}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-lg">{title}</CardTitle>
          {badge && <Badge>{badge}</Badge>}
        </div>
      </CardHeader>
      <CardContent>
        <div className="text-3xl font-extrabold">{percent}</div>
        <ul className="mt-4 space-y-2 text-sm text-slate-600">
          {points.map((p, i) => (
            <li key={i} className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4"/>{p}</li>
          ))}
        </ul>
        <Button className="w-full mt-6 rounded-2xl" onClick={() => smoothScrollTo("contact")}>Выбрать</Button>
      </CardContent>
    </Card>
  );
}

function Testimonials() {
  const testimonials = [
    {
      name: "Алексей К.",
      company: "Поставки оборудования",
      text: "За последние 3 месяца получил 420 000 руб. вознаграждения. Всё официально, с чеками и без проблем с налоговой.",
      amount: "2.4 млн руб.",
      reward: "420 000 руб."
    },
    {
      name: "Марина С.",
      company: "IT-консалтинг",
      text: "Рекомендую своим клиентам уже полгода. Процесс отлажен: лиды учитываются, выплаты вовремя. Отличная альтернатива 'серым' схемам.",
      amount: "1.8 млн руб.",
      reward: "126 000 руб."
    },
    {
      name: "Дмитрий П.",
      company: "Строительные материалы",
      text: "Перешёл от неофициальных процентов к этой программе. Сплю спокойно, знаю что всё чисто. Поддержка всегда на связи.",
      amount: "5.1 млн руб.",
      reward: "357 000 руб."
    }
  ];

  return (
    <section id="testimonials" className="container mx-auto px-4 py-16 bg-slate-50 rounded-2xl">
      <h2 className="text-2xl md:text-3xl font-bold text-center mb-12">Отзывы партнёров</h2>
      <div className="grid md:grid-cols-3 gap-8">
        {testimonials.map((testimonial, index) => (
          <Card key={index} className="border-slate-200">
            <CardContent className="p-6">
              <div className="flex items-center mb-4">
                {[...Array(5)].map((_, i) => (
                  <Star key={i} className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                ))}
              </div>
              <p className="text-slate-600 mb-4 italic">"{testimonial.text}"</p>
              <div className="border-t pt-4">
                <div className="font-semibold">{testimonial.name}</div>
                <div className="text-sm text-slate-500">{testimonial.company}</div>
                <div className="text-xs text-slate-400 mt-2">
                  Оборот: {testimonial.amount} • Вознаграждение: {testimonial.reward}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </section>
  );
}

function LegalBlock() {
  const documents = [
    { name: "Договор-оферта", url: "/documents/offer.pdf" },
    { name: "Партнёрское соглашение", url: "/documents/agreement.pdf" },
    { name: "Политика конфиденциальности", url: "/documents/privacy.pdf" }
  ];

  return (
    <section id="legal" className="container mx-auto px-4 py-16">
      <div className="grid md:grid-cols-2 gap-8 items-start">
        <div>
          <h2 className="text-2xl md:text-3xl font-bold flex items-center gap-2"><ShieldCheck className="h-6 w-6"/> Юридическая чистота</h2>
          <p className="mt-2 text-slate-600">Мы работаем «в белую»: агентский договор, акт оказанных услуг, чек самозанятого в приложении «Мой налог». Вознаграждение — маркетинговые услуги/агентские, выплаты только за результат.</p>
          <ul className="mt-4 space-y-2 text-sm text-slate-600">
            <li className="flex items-center gap-2"><FileText className="h-4 w-4"/> Договор оферты или индивидуальный агентский договор</li>
            <li className="flex items-center gap-2"><FileText className="h-4 w-4"/> Ежемесячные акты и отчёты</li>
            <li className="flex items-center gap-2"><FileText className="h-4 w-4"/> Чеки НПД (самозанятый 4–6%)</li>
          </ul>

          <div className="mt-6">
            <h3 className="font-semibold mb-3">Документы для скачивания</h3>
            <div className="space-y-2">
              {documents.map((doc, index) => (
                <a
                  key={index}
                  href={doc.url}
                  download
                  className="flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800 transition-colors"
                >
                  <Download className="h-4 w-4" />
                  {doc.name}
                </a>
              ))}
            </div>
          </div>
        </div>
        <Card className="border-slate-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><BookOpen className="h-5 w-5"/> Обоснование для проверок</CardTitle>
          </CardHeader>
          <CardContent className="text-sm text-slate-600 space-y-3">
            <p>Выплаты классифицируются как расходы на продвижение/маркетинг/агентские услуги. Публичная партнёрская программа подтверждает отсутствие «индивидуальных» условий и даёт прозрачный регламент начислений.</p>
            <p>Участие добровольное, обязательств по объёму нет. Вознаграждение начисляется только при фактических поставках клиенту.</p>
          </CardContent>
        </Card>
      </div>
    </section>
  );
}

function FAQ() {
  const items = [
    {
      q: "Нужно ли быть самозанятым?",
      a: "Да, это самый простой и официальный способ получать вознаграждение. Регистрация занимает 2 минуты в приложении 'Мой налог'."
    },
    {
      q: "С какой суммы платите процент?",
      a: "База расчёта — сумма сделки без НДС. Выплаты производятся ежемесячно по акту и чеку."
    },
    {
      q: "Что с конфликтом интересов?",
      a: "Мы строим публичную партнёрскую схему. При необходимости вознаграждение может получать не сотрудник клиента, а иной участник (родственник/внешний партнёр), действующий как самозанятый."
    },
    {
      q: "Можно ли начать с одной рекомендации?",
      a: "Да. Нет минимальных требований по объёму."
    }
  ];
  return (
    <section id="faq" className="container mx-auto px-4 py-16">
      <h2 className="text-2xl md:text-3xl font-bold mb-6">Частые вопросы</h2>
      <div className="grid md:grid-cols-2 gap-6">
        {items.map((it, i) => (
          <Card key={i} className="border-slate-200">
            <CardHeader>
              <CardTitle className="text-base">{it.q}</CardTitle>
            </CardHeader>
            <CardContent className="text-slate-600 text-sm">{it.a}</CardContent>
          </Card>
        ))}
      </div>
    </section>
  );
}

function CTA() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    comment: ""
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    // Simulate form submission
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setIsSubmitting(false);
    setIsSubmitted(true);
    
    // Reset form after 5 seconds
    setTimeout(() => {
      setIsSubmitted(false);
      setFormData({ name: "", email: "", phone: "", comment: "" });
    }, 5000);
  };

  const handleInputChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  if (isSubmitted) {
    return (
      <section id="contact" className="container mx-auto px-4 py-16">
        <Card className="border-slate-200">
          <CardContent className="p-10 text-center">
            <CheckCircle2 className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h3 className="text-2xl font-bold mb-2">Заявка отправлена!</h3>
            <p className="text-slate-600">Мы свяжемся с вами в течение рабочего дня для обсуждения деталей сотрудничества.</p>
          </CardContent>
        </Card>
      </section>
    );
  }

  return (
    <section id="contact" className="container mx-auto px-4 py-16">
      <Card className="border-slate-200">
        <CardContent className="p-6 md:p-10 grid md:grid-cols-2 gap-8 items-center">
          <div>
            <h3 className="text-2xl font-bold">Готовы начать?</h3>
            <p className="mt-2 text-slate-600">Оставьте контакты — пришлём договор и добавим в партнёрскую программу.</p>
            <ul className="mt-4 text-sm text-slate-600 space-y-2">
              <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4"/> Подключение за 1 день</li>
              <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4"/> Прозрачные начисления</li>
              <li className="flex items-center gap-2"><CheckCircle2 className="h-4 w-4"/> Поддержка в Telegram</li>
            </ul>
          </div>
          <form className="grid gap-4" onSubmit={handleSubmit}>
            <div className="grid gap-2">
              <Label htmlFor="name">Имя</Label>
              <Input
                id="name"
                name="name"
                placeholder="Иван"
                value={formData.name}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="you@email.ru"
                value={formData.email}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="phone">Телефон</Label>
              <Input
                id="phone"
                name="phone"
                type="tel"
                placeholder="+7 (___) ___-__-__"
                value={formData.phone}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="comment">Комментарий</Label>
              <Textarea
                id="comment"
                name="comment"
                placeholder="Компания, ниша, ориентировочные объёмы..."
                value={formData.comment}
                onChange={handleInputChange}
              />
            </div>
            <Button type="submit" className="rounded-2xl" disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                  Отправка...
                </>
              ) : (
                "Отправить заявку"
              )}
            </Button>
            <div className="flex items-center gap-2 text-xs text-slate-500 mt-1">
              <Mail className="h-3.5 w-3.5"/> partner@yourbrand.ru
              <Phone className="h-3.5 w-3.5 ml-3"/> +7 900 000-00-00
            </div>
          </form>
        </CardContent>
      </Card>
    </section>
  );
}

function Footer() {
  return (
    <footer className="border-t bg-white">
      <div className="container mx-auto px-4 py-8 text-sm text-slate-500 flex flex-col md:flex-row gap-4 md:gap-8 items-center justify-between">
        <div className="flex items-center gap-2"><HeartHandshake className="h-4 w-4"/> © {new Date().getFullYear()} Партнёрская программа</div>
        <div className="flex items-center gap-4">
          <button onClick={() => smoothScrollTo("legal")} className="hover:text-slate-900 transition-colors">Правовые документы</button>
          <button onClick={() => smoothScrollTo("faq")} className="hover:text-slate-900 transition-colors">FAQ</button>
        </div>
      </div>
    </footer>
  );
}
